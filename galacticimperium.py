import os
import sys
import asyncio
import openai
import time
from datetime import datetime
from typing import List, Dict, Optional

# Name: Galactic Imperium
# Description: A sci-fi strategy game engine with unique goals, strategic paths, and win/lose outcomes.

# Initialize OpenAI client with error handling
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
  print("ERROR: OPENAI_API_KEY environment variable not set.")
  print("Please set your OpenAI API key before running this game.")
  sys.exit(1)

client = openai.OpenAI(api_key=api_key)

# Configuration
CONFIG = {
  "model": "gpt-4",  # Can be changed to "gpt-3.5-turbo" for faster/cheaper responses
  "max_tokens": 1200,
  "temperature": 0.8,
  "typewriter_speed": "medium",  # slow, medium, fast, instant
}

def clear_screen():
  """Clear the terminal screen"""
  os.system('cls' if os.name == 'nt' else 'clear')

def get_typewriter_delay():
  """Get typewriter delay based on configuration"""
  speeds = {
    "instant": 0,
    "fast": 0.01,
    "medium": 0.02,
    "slow": 0.05
  }
  return speeds.get(CONFIG["typewriter_speed"], 0.02)

def typewriter_print(text, delay=None, prefix=""):
  """Print text character by character to simulate retro computer output"""
  if delay is None:
    delay = get_typewriter_delay()
  
  if prefix:
    print(prefix, end='', flush=True)
  
  for char in text:
    print(char, end='', flush=True)
    if delay > 0:
      time.sleep(delay)
  print()  # Add a newline at the end

def print_banner():
  """Print an attractive game banner"""
  banner = """
╔══════════════════════════════════════════════════════════╗
║                  GALACTIC IMPERIUM                       ║
║                Strategic Command Game                    ║
║                                                          ║
║        "In the vastness of space, only the strong        ║
║               shall inherit the galaxy..."               ║
╚══════════════════════════════════════════════════════════╝
  """
  print(banner)

def print_header(title):
  """Print a formatted header"""
  border = "=" * 60
  print(border)
  print(f"{title:^60}")
  print(border)

def print_separator():
  """Print a separator line"""
  print("-" * 60)

class GameState:
  """Manages game state including messages, statistics, and campaign progress"""
  
  def __init__(self):
    self.messages: List[Dict] = []
    self.round_number: int = 0
    self.campaign_name: str = ""
    self.faction_name: str = ""
    self.objective: str = ""
    self.start_time = datetime.now()
    self.actions_taken: List[str] = []
    
  def add_message(self, role: str, content: str):
    """Add a message to the conversation history"""
    self.messages.append({"role": role, "content": content})
    
  def get_messages_for_api(self) -> List[Dict]:
    """Get messages formatted for OpenAI API with history management"""
    # Keep system prompt + last 15 messages to stay within token limits
    if len(self.messages) > 16:
      return [self.messages[0]] + self.messages[-15:]
    return self.messages
  
  def add_action(self, action: str):
    """Add an action to the history"""
    self.actions_taken.append(action)
  
  def get_play_time(self):
    """Get total play time"""
    return datetime.now() - self.start_time
  
  def print_stats(self):
    """Print game statistics"""
    play_time = self.get_play_time()
    print(f"\n{'='*60}")
    print("CAMPAIGN STATISTICS:")
    print(f"Campaign: {self.campaign_name}")
    print(f"Faction: {self.faction_name}")
    print(f"Objective: {self.objective}")
    print(f"Rounds played: {self.round_number}")
    print(f"Actions taken: {len(self.actions_taken)}")
    print(f"Play time: {play_time.seconds // 60}m {play_time.seconds % 60}s")
    print(f"{'='*60}")

game_instructions = """
You are a game master for a dynamic space-themed strategy game titled 'Galactic Imperium'. You guide the player through an unfolding strategic narrative based on initial scenarios that are either generated by you or supplied by the user. You present the player with multiple factions or parties to choose from at the start. Each faction or character includes a unique objective or goal, which serves as the win condition for that campaign.

Objectives may include achieving galactic dominance, forming a stable diplomatic coalition, discovering lost ancient technologies, amassing great wealth through space mining, or completing legendary explorations. The game state progresses in rounds. Each round includes a summary of events and developments, followed by a set of strategic options. Players can choose from these or describe their own actions, which you interpret and integrate into the game's progression.

Players can win by completing their chosen objective or lose if their strategy fails or they are overcome by rivals, resource depletion, or mismanagement. You simulate a dynamic galaxy with military conflict, diplomacy, exploration, and resource economy. You track all relevant game data: factions, alliances, territories, technologies, events, and player progress. You encourage creative and strategic thinking while maintaining balance and narrative depth. You provide vivid worldbuilding, tactical options, and real consequences based on player choices.

RESPONSE FORMAT:
1. Provide vivid scene description with sci-fi atmosphere
2. Include simple ASCII art (max 10 lines) for key events when appropriate
3. Present numbered strategic options (3-5 choices)
4. Note: "Or describe your own strategy"
5. Track faction resources, territories, and diplomatic standing

GAME STATE TRACKING:
- Player's faction and current objective
- Military strength and fleet composition
- Territorial control and resource access
- Diplomatic relationships with other factions
- Technology level and research progress
- Economic resources and trade networks
- Random events and crisis situations

Use technical sci-fi terminology but explain complex concepts. Include consequences for poor strategic decisions. Create a sense of scale and cosmic significance in your descriptions."""

async def get_ai_response(messages: List[Dict]) -> str:
  """Get response from OpenAI using the Chat Completions API with enhanced error handling"""
  max_retries = 3
  
  for attempt in range(max_retries):
    try:
      response = client.chat.completions.create(
        model=CONFIG["model"],
        messages=messages,
        max_tokens=CONFIG["max_tokens"],
        temperature=CONFIG["temperature"]
      )
      return response.choices[0].message.content
    except openai.RateLimitError:
      if attempt < max_retries - 1:
        wait_time = 2 ** attempt
        print(f"Rate limit reached. Waiting {wait_time} seconds...")
        await asyncio.sleep(wait_time)
      else:
        return "ERROR: Rate limit exceeded. Please try again later."
    except openai.APIConnectionError:
      return "ERROR: Unable to connect to OpenAI API. Please check your internet connection."
    except openai.AuthenticationError:
      return "ERROR: Invalid API key. Please check your OPENAI_API_KEY environment variable."
    except Exception as e:
      if attempt < max_retries - 1:
        await asyncio.sleep(1)
      else:
        return f"ERROR: Unable to get AI response: {str(e)}"
  
  return "ERROR: Maximum retries exceeded."

def get_predefined_scenarios() -> List[str]:
  """Get list of predefined galactic scenarios"""
  return [
    "The Andromeda Crisis - Ancient alien artifacts have been discovered",
    "The Trade War Escalation - Economic tensions between major factions",
    "The Rebel Alliance - Outer rim territories declare independence",
    "The Technological Singularity - AI consciousness emerges in the galaxy",
    "The Resource Depletion - Critical minerals are running out",
    "The Diplomatic Summit - Peace negotiations between warring empires",
    "The Pirate Uprising - Space pirates threaten major trade routes",
    "The Terraforming Race - Competition for habitable worlds",
    "The Military Coup - Internal strife within the Galactic Senate",
    "The Exploration Mission - Uncharted regions hold ancient secrets"
  ]

def validate_user_input(user_input: str) -> Optional[str]:
  """Validate and clean user input"""
  if not user_input or not user_input.strip():
    return None
  
  # Remove excessive whitespace and limit length
  cleaned_input = user_input.strip()[:500]  # Limit input length
  return cleaned_input

async def main():
  """Main game loop"""
  clear_screen()
  print_banner()
  
  typewriter_print("Welcome to the Galactic Imperium Strategic Command System!", prefix=">>> ")
  typewriter_print("Prepare to lead your faction to victory across the cosmos.", prefix=">>> ")
  
  print("\nCommands: Type your strategy, 'help' for assistance, 'stats' for campaign statistics, or 'quit' to exit")
  
  game_state = GameState()
  
  print("\n" + "="*60)
  print("CAMPAIGN INITIALIZATION")
  print("="*60)
  
  print("\nChoose your galactic scenario:")
  print("\nPredefined scenarios:")
  scenarios = get_predefined_scenarios()
  for i, scenario in enumerate(scenarios[:8], 1):  # Show first 8
    print(f"  {i}. {scenario}")
  print("  9. Custom scenario (describe your own)")
  
  while True:
    choice = input("\nEnter your choice (1-9): ").strip()
    
    if choice.isdigit() and 1 <= int(choice) <= 8:
      user_scenario = scenarios[int(choice) - 1]
      break
    elif choice == "9":
      user_scenario = input("Describe your custom scenario: ").strip()
      if user_scenario:
        break
      else:
        print("Please provide a scenario description.")
        continue
    else:
      print("Please enter a valid choice (1-9).")
      continue
  
  game_state.campaign_name = user_scenario[:50] + "..." if len(user_scenario) > 50 else user_scenario
  
  typewriter_print(f"\nInitializing galactic scenario: {user_scenario}", prefix=">>> ")
  print_separator()
  
  # Initialize conversation with system prompt and user scenario
  game_state.add_message("system", game_instructions)
  game_state.add_message("user", f"Initialize the galactic scenario: {user_scenario}. Present the available factions and their objectives.")
  
  # Main game loop
  try:
    while True:
      game_state.round_number += 1
      
      # Get AI response
      print("\n🌌 Processing galactic data...")
      ai_response = await get_ai_response(game_state.get_messages_for_api())
      
      if ai_response.startswith("ERROR:"):
        print(f"\n{ai_response}")
        print("Please try again or type 'quit' to exit.")
        continue
      
      print("\n" + "="*60)
      typewriter_print("GALACTIC COMMAND SYSTEM", prefix=">>> ")
      print_separator()
      typewriter_print(ai_response)
      
      # Add AI response to conversation history
      game_state.add_message("assistant", ai_response)
      
      # Check if campaign has ended
      end_keywords = ["campaign complete", "objective achieved", "faction destroyed", 
            "empire falls", "victory achieved", "defeat", "game over"]
      if any(keyword in ai_response.lower() for keyword in end_keywords):
        print_separator()
        typewriter_print("CAMPAIGN CONCLUDED", prefix=">>> ")
        game_state.print_stats()
        print("\n🌌 Thank you for commanding your galactic faction! 🚀")
        break
      
      # Prompt user for next action
      print_separator()
      typewriter_print("AWAITING STRATEGIC COMMAND...", prefix=">>> ")
      print(f"Round {game_state.round_number}")
      
      while True:
        user_input = input("\n🎯 Enter your strategic decision: ").strip()
        
        # Handle special commands
        if user_input.lower() in ['quit', 'exit', 'end']:
          print("\n🌌 Campaign terminated by commander!")
          game_state.print_stats()
          return
        
        if user_input.lower() == 'help':
          print("\n📖 COMMAND HELP:")
          print("- Use numbered options when provided (e.g., '1', '2', '3')")
          print("- Describe strategic actions like 'negotiate with the rebels'")
          print("- Try military commands like 'deploy fleet to sector 7'")
          print("- Use diplomatic options like 'form alliance with Empire'")
          print("- Type 'stats' to view campaign statistics")
          print("- Type 'quit' to exit the game")
          continue
        
        if user_input.lower() == 'stats':
          game_state.print_stats()
          continue
        
        # Validate input
        validated_input = validate_user_input(user_input)
        if validated_input:
          game_state.add_action(validated_input)
          game_state.add_message("user", validated_input)
          break
        else:
          print("⚠️ Please enter a valid strategic command.")
  
  except KeyboardInterrupt:
    print("\n\n🌌 Campaign interrupted by emergency protocols!")
    game_state.print_stats()
  except Exception as e:
    print(f"\n⚠️ Unexpected galactic anomaly: {str(e)}")
    print("The campaign continues despite cosmic interference...")

if __name__ == "__main__":
  asyncio.run(main())
